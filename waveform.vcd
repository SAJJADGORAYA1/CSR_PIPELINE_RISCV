$version Generated by VerilatedVcd $end
$date Sat Jun 24 00:28:07 2023
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 ,! External_Intrpt $end
  $var wire  1 *! clk $end
  $var wire  1 +! rst $end
  $scope module Three_stage_Pipeline $end
   $var wire  4 & ALU_control [3:0] $end
   $var wire 32 $ ALU_result_DE [31:0] $end
   $var wire  1 ,! External_Intrpt $end
   $var wire 32 # Instruction_F [31:0] $end
   $var wire  1 / RegWrite $end
   $var wire  1 0 RegWrite_MW $end
   $var wire  1 8 Stall_DMOut $end
   $var wire  1 7 Stall_MW $end
   $var wire  1 7 Stall_Out $end
   $var wire  1 ? Timer_Intrpt $end
   $var wire  3 ( br_type [2:0] $end
   $var wire  1 *! clk $end
   $var wire  1 3! cs $end
   $var wire  1 : csr_rd_en $end
   $var wire  1 < csr_rd_en_MW $end
   $var wire  1 9 csr_wr_en $end
   $var wire  1 = csr_wr_en_MW $end
   $var wire  3 ) load [2:0] $end
   $var wire  3 * load_MW [2:0] $end
   $var wire  4 ' mask [3:0] $end
   $var wire  1 ; mret $end
   $var wire  1 > mret_MW $end
   $var wire  1 3 rd_en $end
   $var wire  1 4 rd_en_MW $end
   $var wire 32 % rdata2_DE [31:0] $end
   $var wire 32 -! readData [31:0] $end
   $var wire  1 +! rst $end
   $var wire  1 5 sel_A $end
   $var wire  1 6 sel_B $end
   $var wire  2 - store [1:0] $end
   $var wire  2 . store_MW [1:0] $end
   $var wire  2 + wb_sel [1:0] $end
   $var wire  2 , wb_sel_MW [1:0] $end
   $var wire  1 1 wr_en $end
   $var wire  1 2 wr_en_MW $end
   $scope module CR $end
    $var wire  1 / RegWrite $end
    $var wire  1 0 RegWrite_MW $end
    $var wire  1 7 Stall_MW $end
    $var wire  1 *! clk $end
    $var wire  1 : csr_rd_en $end
    $var wire  1 < csr_rd_en_MW $end
    $var wire  1 9 csr_wr_en $end
    $var wire  1 = csr_wr_en_MW $end
    $var wire  3 ) load [2:0] $end
    $var wire  3 * load_MW [2:0] $end
    $var wire  1 ; mret $end
    $var wire  1 > mret_MW $end
    $var wire  1 3 rd_en $end
    $var wire  1 4 rd_en_MW $end
    $var wire  1 +! rst $end
    $var wire  2 - store [1:0] $end
    $var wire  2 . store_MW [1:0] $end
    $var wire  2 + wb_sel [1:0] $end
    $var wire  2 , wb_sel_MW [1:0] $end
    $var wire  1 1 wr_en $end
    $var wire  1 2 wr_en_MW $end
   $upscope $end
   $scope module CU $end
    $var wire  4 & ALU_control [3:0] $end
    $var wire  7 B! AU_opcode [6:0] $end
    $var wire  7 >! B_opcode [6:0] $end
    $var wire  7 C! CSR_opcode [6:0] $end
    $var wire  7 <! IL_opcode [6:0] $end
    $var wire  7 ;! I_opcode [6:0] $end
    $var wire  7 @! JR_opcode [6:0] $end
    $var wire  7 ?! J_opcode [6:0] $end
    $var wire  7 :! R_opcode [6:0] $end
    $var wire  1 / RegWrite $end
    $var wire  7 =! S_opcode [6:0] $end
    $var wire  7 A! U_opcode [6:0] $end
    $var wire  3 ( br_type [2:0] $end
    $var wire  1 : csr_rd_en $end
    $var wire  1 9 csr_wr_en $end
    $var wire  7 D! func [6:0] $end
    $var wire  3 (! func3 [2:0] $end
    $var wire  7 '! func7 [6:0] $end
    $var wire  3 ) load [2:0] $end
    $var wire  1 ; mret $end
    $var wire  7 &! opcode [6:0] $end
    $var wire  1 3 rd_en $end
    $var wire  1 5 sel_A $end
    $var wire  1 6 sel_B $end
    $var wire  2 - store [1:0] $end
    $var wire  2 + wb_sel [1:0] $end
    $var wire  1 1 wr_en $end
   $upscope $end
   $scope module DM $end
    $var wire 32 $ ALU_result_DE [31:0] $end
    $var wire  1 8 Stall_DMOut $end
    $var wire  1 7 Stall_Out $end
    $var wire  1 *! clk $end
    $var wire  1 3! cs $end
    $var wire  4 ' mask [3:0] $end
    $var wire  1 4 rd_en_MW $end
    $var wire 32 % rdata2_DE [31:0] $end
    $var wire 32 -! readData [31:0] $end
    $var wire  1 +! rst $end
    $var wire  1 2 wr_en_MW $end
   $upscope $end
   $scope module DP $end
    $var wire  4 & ALU_control [3:0] $end
    $var wire 32 D ALU_result [31:0] $end
    $var wire 32 $ ALU_result_DE [31:0] $end
    $var wire 32 R Addr [31:0] $end
    $var wire  1 ,! External_Intrpt $end
    $var wire  1 V Forward_A $end
    $var wire  1 W Forward_B $end
    $var wire 32 I Immediate [31:0] $end
    $var wire 32 C Instruction [31:0] $end
    $var wire 32 Q Instruction_DE [31:0] $end
    $var wire 32 # Instruction_F [31:0] $end
    $var wire 32 @ PC [31:0] $end
    $var wire 32 G PC_DE [31:0] $end
    $var wire 32 F PC_F [31:0] $end
    $var wire 32 B PC_IN [31:0] $end
    $var wire 32 A PC_new [31:0] $end
    $var wire  1 0 RegWrite_MW $end
    $var wire  1 X Stall $end
    $var wire  1 8 Stall_DMOut $end
    $var wire  1 7 Stall_MW $end
    $var wire  1 7 Stall_Out $end
    $var wire  1 8 Stall_out_en $end
    $var wire  1 ? Timer_Intrpt $end
    $var wire  1 T br_taken $end
    $var wire  3 ( br_type [2:0] $end
    $var wire 32 1! cause [31:0] $end
    $var wire  1 *! clk $end
    $var wire  1 3! cs $end
    $var wire  1 Z csr_flush $end
    $var wire  1 < csr_rd_en_MW $end
    $var wire 32 0! csr_rdata [31:0] $end
    $var wire 32 S csr_wdata [31:0] $end
    $var wire  1 = csr_wr_en_MW $end
    $var wire  1 U epc_taken $end
    $var wire 32 H evec [31:0] $end
    $var wire  1 Y flush $end
    $var wire  3 * load_MW [2:0] $end
    $var wire  4 ' mask [3:0] $end
    $var wire  1 > mret_MW $end
    $var wire 32 /! rdata [31:0] $end
    $var wire 32 E rdata1 [31:0] $end
    $var wire 32 P rdata2 [31:0] $end
    $var wire 32 % rdata2_DE [31:0] $end
    $var wire 32 J rdataA [31:0] $end
    $var wire 32 K rdataB [31:0] $end
    $var wire 32 L rdata_FA [31:0] $end
    $var wire 32 N rdata_FA_R [31:0] $end
    $var wire 32 M rdata_FB [31:0] $end
    $var wire 32 O rdata_FB_R [31:0] $end
    $var wire 32 -! readData [31:0] $end
    $var wire  1 +! rst $end
    $var wire  1 5 sel_A $end
    $var wire  1 6 sel_B $end
    $var wire  2 . store_MW [1:0] $end
    $var wire  2 , wb_sel_MW [1:0] $end
    $var wire 32 .! wdata [31:0] $end
    $scope module AU $end
     $var wire  4 & ALU_control [3:0] $end
     $var wire 32 D ALU_result [31:0] $end
     $var wire 32 J rdataA [31:0] $end
     $var wire 32 K rdataB [31:0] $end
    $upscope $end
    $scope module BC $end
     $var wire  1 T br_taken $end
     $var wire  3 ( br_type [2:0] $end
     $var wire 32 N rdata_FA [31:0] $end
     $var wire 32 O rdata_FB [31:0] $end
    $upscope $end
    $scope module BR $end
     $var wire  1 X Stall $end
     $var wire  1 *! clk $end
     $var wire 32 L rdata_FA [31:0] $end
     $var wire 32 N rdata_FA_R [31:0] $end
     $var wire 32 M rdata_FB [31:0] $end
     $var wire 32 O rdata_FB_R [31:0] $end
     $var wire  1 +! rst $end
    $upscope $end
    $scope module CSR_R $end
     $var wire 32 R Addr [31:0] $end
     $var wire 32 I Immediate [31:0] $end
     $var wire  1 7 Stall_MW $end
     $var wire  1 *! clk $end
     $var wire 32 S csr_wdata [31:0] $end
     $var wire 32 L rdata_FA [31:0] $end
     $var wire  1 +! rst $end
    $upscope $end
    $scope module FSU $end
     $var wire  1 V Forward_A $end
     $var wire  1 W Forward_B $end
     $var wire 32 Q Instruction_DE [31:0] $end
     $var wire 32 # Instruction_F [31:0] $end
     $var wire  1 0 RegWrite_MW $end
     $var wire  1 X Stall $end
     $var wire  1 7 Stall_MW $end
     $var wire  1 8 Stall_out_en $end
     $var wire  1 T br_taken $end
     $var wire  1 Y flush $end
    $upscope $end
    $scope module IE $end
     $var wire  1 ,! External_Intrpt $end
     $var wire  1 ? Timer_Intrpt $end
     $var wire 32 1! cause [31:0] $end
    $upscope $end
    $scope module IG $end
     $var wire 32 I Immediate [31:0] $end
     $var wire 32 # Instruction_F [31:0] $end
    $upscope $end
    $scope module IM $end
     $var wire 32 C Instruction [31:0] $end
     $var wire 32 @ PC [31:0] $end
    $upscope $end
    $scope module LSU $end
     $var wire 32 $ ALU_result_DE [31:0] $end
     $var wire  1 8 Stall_DMOut $end
     $var wire  1 7 Stall_MW $end
     $var wire  1 7 Stall_Out $end
     $var wire  1 8 Stall_out_en $end
     $var wire  1 3! cs $end
     $var wire  3 * load_MW [2:0] $end
     $var wire  4 ' mask [3:0] $end
     $var wire 32 /! rdata [31:0] $end
     $var wire 32 -! readData [31:0] $end
     $var wire  2 . store_MW [1:0] $end
    $upscope $end
    $scope module P_C $end
     $var wire 32 @ PC [31:0] $end
     $var wire 32 A PC_new [31:0] $end
     $var wire  1 *! clk $end
     $var wire  1 Y flush $end
     $var wire  1 +! rst $end
    $upscope $end
    $scope module RF $end
     $var wire  1 0 RegWrite_MW $end
     $var wire 32 ^ Reg_Mem(0) [31:0] $end
     $var wire 32 _ Reg_Mem(1) [31:0] $end
     $var wire 32 h Reg_Mem(10) [31:0] $end
     $var wire 32 i Reg_Mem(11) [31:0] $end
     $var wire 32 j Reg_Mem(12) [31:0] $end
     $var wire 32 k Reg_Mem(13) [31:0] $end
     $var wire 32 l Reg_Mem(14) [31:0] $end
     $var wire 32 m Reg_Mem(15) [31:0] $end
     $var wire 32 n Reg_Mem(16) [31:0] $end
     $var wire 32 o Reg_Mem(17) [31:0] $end
     $var wire 32 p Reg_Mem(18) [31:0] $end
     $var wire 32 q Reg_Mem(19) [31:0] $end
     $var wire 32 ` Reg_Mem(2) [31:0] $end
     $var wire 32 r Reg_Mem(20) [31:0] $end
     $var wire 32 s Reg_Mem(21) [31:0] $end
     $var wire 32 t Reg_Mem(22) [31:0] $end
     $var wire 32 u Reg_Mem(23) [31:0] $end
     $var wire 32 v Reg_Mem(24) [31:0] $end
     $var wire 32 w Reg_Mem(25) [31:0] $end
     $var wire 32 x Reg_Mem(26) [31:0] $end
     $var wire 32 y Reg_Mem(27) [31:0] $end
     $var wire 32 z Reg_Mem(28) [31:0] $end
     $var wire 32 { Reg_Mem(29) [31:0] $end
     $var wire 32 a Reg_Mem(3) [31:0] $end
     $var wire 32 | Reg_Mem(30) [31:0] $end
     $var wire 32 } Reg_Mem(31) [31:0] $end
     $var wire 32 b Reg_Mem(4) [31:0] $end
     $var wire 32 c Reg_Mem(5) [31:0] $end
     $var wire 32 d Reg_Mem(6) [31:0] $end
     $var wire 32 e Reg_Mem(7) [31:0] $end
     $var wire 32 f Reg_Mem(8) [31:0] $end
     $var wire 32 g Reg_Mem(9) [31:0] $end
     $var wire  1 *! clk $end
     $var wire  5 [ raddr1 [4:0] $end
     $var wire  5 \ raddr2 [4:0] $end
     $var wire 32 E rdata1 [31:0] $end
     $var wire 32 P rdata2 [31:0] $end
     $var wire  1 +! rst $end
     $var wire  5 ] waddr [4:0] $end
     $var wire 32 .! wdata [31:0] $end
    $upscope $end
    $scope module Stage2 $end
     $var wire 32 C Instruction [31:0] $end
     $var wire 32 # Instruction_F [31:0] $end
     $var wire 32 @ PC [31:0] $end
     $var wire 32 F PC_F [31:0] $end
     $var wire  1 X Stall $end
     $var wire  1 *! clk $end
     $var wire  1 Z csr_flush $end
     $var wire  1 Y flush $end
     $var wire  1 +! rst $end
    $upscope $end
    $scope module Stage3 $end
     $var wire 32 D ALU_result [31:0] $end
     $var wire 32 $ ALU_result_DE [31:0] $end
     $var wire 32 Q Instruction_DE [31:0] $end
     $var wire 32 # Instruction_F [31:0] $end
     $var wire 32 G PC_DE [31:0] $end
     $var wire 32 F PC_F [31:0] $end
     $var wire  1 7 Stall_MW $end
     $var wire  1 *! clk $end
     $var wire  1 Z csr_flush $end
     $var wire 32 % rdata2_DE [31:0] $end
     $var wire 32 M rdata_FB [31:0] $end
     $var wire  1 +! rst $end
    $upscope $end
    $scope module csr $end
     $var wire 12 ~ Addr [11:0] $end
     $var wire 12 8! MCAUSE [11:0] $end
     $var wire 12 7! MEPC [11:0] $end
     $var wire 12 5! MIE [11:0] $end
     $var wire 12 9! MIP [11:0] $end
     $var wire 12 4! MSTATUS [11:0] $end
     $var wire 12 6! MTVEC [11:0] $end
     $var wire 32 G PC_DE [31:0] $end
     $var wire 32 1! cause [31:0] $end
     $var wire  1 *! clk $end
     $var wire  1 Z csr_flush $end
     $var wire  1 < csr_rd_en_MW $end
     $var wire 32 0! csr_rdata [31:0] $end
     $var wire 32 S csr_wdata [31:0] $end
     $var wire  1 = csr_wr_en_MW $end
     $var wire  1 U epc_taken $end
     $var wire 32 H evec [31:0] $end
     $var wire 32 #! mcause [31:0] $end
     $var wire 32 %! mepc [31:0] $end
     $var wire 32 !! mie [31:0] $end
     $var wire 32 2! mip [31:0] $end
     $var wire  1 > mret_MW $end
     $var wire 32 "! mstatus [31:0] $end
     $var wire 32 $! mtvec [31:0] $end
     $var wire  1 +! rst $end
    $upscope $end
   $upscope $end
   $scope module TI $end
    $var wire  1 ? Timer_Intrpt $end
    $var wire  1 *! clk $end
    $var wire  3 )! counter [2:0] $end
    $var wire  1 +! rst $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b0000 &
b0001 '
b000 (
b000 )
b000 *
b00 +
b00 ,
b00 -
b00 .
0/
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000001100100000000010000010011 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
1T
0U
0V
0W
0X
1Y
0Z
b00000 [
b00000 \
b00000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b0000000 &!
b0000000 '!
b000 (!
b000 )!
1*!
0+!
0,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000100 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b00000000000000000000000000000000 1!
b00000000000000000000000000000000 2!
03!
b001100000000 4!
b001100000100 5!
b001100000101 6!
b001101000001 7!
b001101000010 8!
b001101000100 9!
b0110011 :!
b0010011 ;!
b0000011 <!
b0100011 =!
b1100011 >!
b1101111 ?!
b1100111 @!
b0110111 A!
b0010111 B!
b1110011 C!
b0100000 D!
#1
0*!
#2
b00000001100100000000010000010011 #
b110 (
b01 +
1/
11
16
b00000000000000000000000000000100 A
b00000000000000000000000000000100 B
b00000000000000000000000000011001 D
b00000000000000000000000000011001 I
b00000000000000000000000000011001 K
0T
0Y
b11001 \
b0010011 &!
b001 )!
1*!
#3
0*!
#4
b00000000000000000000000000011001 $
b0010 '
b01 ,
10
12
b00000000000000000000000000000100 @
b00000000000000000000000000001000 A
b00000000000000000000000000001000 B
b00000000010100000000010010010011 C
b00000001100100000000010000010011 Q
b00000000000000000000000000011001 R
b01000 ]
b000000011001 ~
b010 )!
1*!
b00000000000000000000000000011001 .!
#5
0*!
#6
b00000000010100000000010010010011 #
b00000000000000000000000000001000 @
b00000000000000000000000000001100 A
b00000000000000000000000000001100 B
b00000000100101000000110001100011 C
b00000000000000000000000000000101 D
b00000000000000000000000000000100 F
b00000000000000000000000000000101 I
b00000000000000000000000000000101 K
b00101 \
b00000000000000000000000000011001 f
b011 )!
1*!
#7
0*!
#8
b00000000100101000000110001100011 #
b00000000000000000000000000000101 $
b000 (
b00 +
0/
15
b00000000000000000000000000001100 @
b00000000000000000000000000000101 A
b00000000000000000000000000000101 B
b00000000100101000100011001100011 C
b00000000000000000000000000100000 D
b00000000000000000000000000011001 E
b00000000000000000000000000001000 F
b00000000000000000000000000000100 G
b00000000000000000000000000011000 I
b00000000000000000000000000001000 J
b00000000000000000000000000011000 K
b00000000000000000000000000011001 L
b00000000000000000000000000000101 M
b00000000010100000000010010010011 Q
b00000000000000000000000000000101 R
1T
1W
b01000 [
b01001 \
b01001 ]
b000000000101 ~
b1100011 &!
b100 )!
1*!
b00000000000000000000000000000101 .!
#9
0*!
#10
b00000000100101000100011001100011 #
b00000000000000000000000000100000 $
b00000000000000000000000000000101 %
b0001 '
b010 (
b00 ,
00
b00000000000000000000000000000101 @
b00000000000000000000000000001001 A
b00000000000000000000000000001001 B
b00000000010100000000010010010011 C
b00000000000000000000000000011000 D
b00000000000000000000000000001100 F
b00000000000000000000000000001000 G
b00000000000000000000000000001100 I
b00000000000000000000000000001100 J
b00000000000000000000000000001100 K
b00000000000000000000000000011001 N
b00000000000000000000000000000101 O
b00000000000000000000000000000101 P
b00000000100101000000110001100011 Q
b00000000000000000000000000011000 R
b00000000000000000000000000011001 S
0T
0W
b11000 ]
b00000000000000000000000000000101 g
b000000011000 ~
b100 (!
b101 )!
1*!
b00000000000000000000000000001100 .!
#11
0*!
#12
b00000000010100000000010010010011 #
b00000000000000000000000000011000 $
b110 (
b01 +
1/
05
b00000000000000000000000000001001 @
b00000000000000000000000000001101 A
b00000000000000000000000000001101 B
b00000000100101000000110001100011 C
b00000000000000000000000000000101 D
b00000000000000000000000000000000 E
b00000000000000000000000000000101 F
b00000000000000000000000000001100 G
b00000000000000000000000000000101 I
b00000000000000000000000000000000 J
b00000000000000000000000000000101 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 P
b00000000100101000100011001100011 Q
b00000000000000000000000000001100 R
b00000 [
b00101 \
b01100 ]
b000000001100 ~
b0010011 &!
b000 (!
b110 )!
1*!
b00000000000000000000000000010000 .!
#13
0*!
#14
b00000000100101000000110001100011 #
b00000000000000000000000000000101 $
b00000000000000000000000000000000 %
b0010 '
b000 (
b00 +
b01 ,
0/
10
15
1?
b00000000000000000000000000001101 @
b00000000000000000000000000000101 A
b00000000000000000000000000000101 B
b00000000100101000100011001100011 C
b00000000000000000000000000100001 D
b00000000000000000000000000011001 E
b00000000000000000000000000001001 F
b00000000000000000000000000000101 G
b00000000000000000000000000011000 I
b00000000000000000000000000001001 J
b00000000000000000000000000011000 K
b00000000000000000000000000011001 L
b00000000000000000000000000000101 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000101 P
b00000000010100000000010010010011 Q
b00000000000000000000000000000101 R
b00000000000000000000000000000000 S
1T
1W
b01000 [
b01001 \
b01001 ]
b000000000101 ~
b1100011 &!
b000 )!
1*!
b00000000000000000000000000000101 .!
b10000000000000000000000000000100 1!
b00000000000000000000000010000000 2!
#15
0*!
#16
b00000000100101000100011001100011 #
b00000000000000000000000000100001 $
b00000000000000000000000000000101 %
b010 (
b00 ,
00
0?
b00000000000000000000000000000101 @
b00000000000000000000000000001001 A
b00000000000000000000000000001001 B
b00000000010100000000010010010011 C
b00000000000000000000000000011001 D
b00000000000000000000000000001101 F
b00000000000000000000000000001001 G
b00000000000000000000000000001100 I
b00000000000000000000000000001101 J
b00000000000000000000000000001100 K
b00000000000000000000000000011001 N
b00000000000000000000000000000101 O
b00000000100101000000110001100011 Q
b00000000000000000000000000011000 R
b00000000000000000000000000011001 S
0T
0W
b11000 ]
b000000011000 ~
b100 (!
b001 )!
1*!
b00000000000000000000000000001101 .!
b00000000000000000000000000000000 1!
b00000000000000000000000000000000 2!
#17
0*!
#18
b00000000010100000000010010010011 #
b00000000000000000000000000011001 $
b110 (
b01 +
1/
05
b00000000000000000000000000001001 @
b00000000000000000000000000001101 A
b00000000000000000000000000001101 B
b00000000100101000000110001100011 C
b00000000000000000000000000000101 D
b00000000000000000000000000000000 E
b00000000000000000000000000000101 F
b00000000000000000000000000001101 G
b00000000000000000000000000000101 I
b00000000000000000000000000000000 J
b00000000000000000000000000000101 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 P
b00000000100101000100011001100011 Q
b00000000000000000000000000001100 R
b00000 [
b00101 \
b01100 ]
b000000001100 ~
b0010011 &!
b000 (!
b010 )!
1*!
b00000000000000000000000000010001 .!
#19
0*!
